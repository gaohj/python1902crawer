import requests
import re
import base64
import io
from fontTools.ttLib import TTFont


headers = {
        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36',
        'Referer':'https://www.shixiseng.com/interns?page=1&k=python'
}

#本来是一个ttf文件 为了方便加载 base64编码 转成字符串
font_face = ""
#对上面的字符串 进行解码 还原 ttf文件
# with open('shixiseng.ttf','wb') as fp:
#     fp.write(base64.b64decode(font_face))
font_bytes = io.BytesIO(base64.b64decode(font_face))

baseFont = TTFont(font_bytes)

# print(baseFont['glyf'])
baseGlyf = baseFont['glyf']
# 字体和形状的关系
baseFontMap = {
        0:baseGlyf['uni30'],
        1:baseGlyf['uni31'],
        2:baseGlyf['uni32'],
        3:baseGlyf['uni33'],
        4:baseGlyf['uni34'],
        5:baseGlyf['uni35'],
        6:baseGlyf['uni36'],
        7:baseGlyf['uni37'],
        8:baseGlyf['uni38'],
        9:baseGlyf['uni39'],
        '四':baseGlyf['uni56DB'],
}

url = "https://www.shixiseng.com/intern/inn_ntg282xbnu5o"
resp = requests.get(url,headers=headers)
text = resp.text

#抓取当前网页的 字体文件
result = re.search(r'font-family:myFont; src: url\("data:application/octet-stream;base64,(.+?)"\)',text)
font_face = result.group(1)
b  = base64.b64decode(font_face)
current_Font = TTFont(io.BytesIO(b))

#获取当前网页字体所有的形状
current_glyf = current_Font['glyf']

#获取code 和name的映射关系
codeNameMap = current_Font.getBestCmap()

#循环code 和 name
for code,name in codeNameMap.items():
        #根据name 拿到 字体形状
        current_shape = current_glyf[name]
        #循环早就准备好的字体和形状字典  第25行
        for number,shape in baseFontMap.items():
                if shape == current_shape:
                        #构建网页中的code
                        webcode = str(hex(code)).replace("0","&#",1)
                        text = re.sub(webcode,str(number),text)
print(text)

